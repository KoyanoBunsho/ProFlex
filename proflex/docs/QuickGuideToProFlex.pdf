%PDF-1.1
1 0 obj
<<
/CreationDate (D:20140925152753)
/Producer (text2pdf v1.1 (\251 Phil Smith, 1996))
/Title (QuickGuideToProFlex.txt)
>>
endobj
2 0 obj
<<
/Type /Catalog
/Pages 3 0 R
>>
endobj
4 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F1
/BaseFont /Courier
>>
endobj
5 0 obj
<<
  /Font << /F1 4 0 R >>
  /ProcSet [ /PDF /Text ]
>>
endobj
6 0 obj
<<
/Type /Page
/Parent 3 0 R
/Resources 5 0 R
/Contents 7 0 R
>>
endobj
7 0 obj
<<
/Length 8 0 R
>>
stream
BT
/F1 10 Tf
1 0 0 1 50 752 Tm
12 TL
(######################################################## \015)'
(\015)'
(        Protein Structure Analysis and Design Lab \015)'
(        Michigan State University \015)'
(        Sep 18, 2014\015)'
(\015)'
(######################################################## \015)'
(\015)'
( \015)'
(MSU ProFlex version 5.2 \015)'
(\015)'
(\015)'
(This file has three parts:\015)'
(\015)'
(\(i\)     Installation notes \015)'
(\(ii\)    Input pre-processing and how to run ProFlex \015)'
(\(iii\)   Interpreting and using the ProFlex output \015)'
(\015)'
(\015)'
(                Part - I        Installation Notes \015)'
(                ============================== \015)'
(\015)'
(ProFlex runs on various Unix systems \(Linux with kernel 2.4.18 or higher, \015)'
(Solaris 9 \(and probably newer versions\), and SGI Octane running Irix64. \015)'
(\015)'
(Before installing and compiling ProFlex, the tar file has to be placed \015)'
(in the directory that will contain the root directory of the global ProFlex \015)'
(installation \(e.g. /usr/soft/\). \015)'
(\015)'
(ProFlex has been build-tested with the GNU GCC compiler, v. 4.1.2 and higher.\015)'
(The Fortran component builds of ProFlex have been tested with both g77 and\015)'
(gfortran.\015)'
(\015)'
( \015)'
(To install ProFlex: \015)'
(\015)'
(1. Unzip and untar the proflexv5.2.tgz using the command: \015)'
(\015)'
(        tar zxfv proflexv5.2.tgz \015)'
(\015)'
(The untarred directory name will be proflexv5.2. It should be renamed to \015)'
(proflex, e.g., \015)'
(\015)'
(        mv proflexv5.2 proflex \015)'
(\015)'
(Before you do this, please remember to back up any existing versions of \015)'
(ProFlex you might have in the directory. \015)'
(\015)'
(2. Set the environment variable PROFLEX_HOME to the prog subdirectory of the \015)'
(proflex directory just created above, using the full, explicit path. This is \015)'
(the directory in which you performed the tar command, followed by its \015)'
(subdirectory proflex/prog, e.g.,\015)'
(\015)'
(        setenv PROFLEX_HOME /usr/soft/proflex/prog \(tcsh shell\), or\015)'
(        export PROFLEX_HOME=/usr/soft/proflex/prog \(bash shell\) \015)'
(\015)'
(3. If you have g77 installed in your system path, you will not need to set\015)'
(the F77 environmental variable.  However, if you do not, you will need to\015)'
(assign an appropriate fortran compiler to the F77 variable, e.g.,\015)'
(\015)'
ET
endstream
endobj
8 0 obj
2459
endobj
9 0 obj
<<
/Type /Page
/Parent 3 0 R
/Resources 5 0 R
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 11 0 R
>>
stream
BT
/F1 10 Tf
1 0 0 1 50 752 Tm
12 TL
(        setenv F77 gfortran \(tcsh shell\), or\015)'
(        export F77=gfortran \(bash shell\)\015)'
(\015)'
(4. Then change the current working directory to the proflex directory and \015)'
( run the make command to complete installation, e.g., \015)'
(\015)'
(        cd /usr/soft/proflex  \015)'
(\015)'
(        make \015)'
(\015)'
(This creates a bin directory with a link to the proflex executable, e.g., \015)'
(\015)'
(        /usr/soft/proflex/bin/proflex \015)'
(\015)'
(NOTE:   make requires the gcc, g++, and g77/gfortran, the GNU C, C++, and FORTRA)'
(N77 \015)'
(compilers, respectively, to be reachable through your Unix PATH, which is \015)'
(usually set in your .cshrc or other similar shell initialization script. \015)'
(These compilers can be downloaded from the GNU website:\015)'
(\015)'
(        http://www.gcc.gnu.org\015)'
(\015)'
(\015)'
(\015)'
(        Part - II       How to pre-process input files and run ProFlex\015)'
(        ======================================================== \015)'
(\015)'
(Notes on preparing PDB files as input to ProFlex:\015)'
(\015)'
(i\) ProFlex requires the input file to be named with an extension ".pdb", \015)'
(e.g., 1ahb.pdb \(not 1ahb.ent\)\015)'
(\015)'
(ii\) Include only those heteroatoms \(atoms that are not proteinaceous in \015)'
(origin\) and ligands that you would like to be included in the flexibility \015)'
(analysis and which are essentially a part of the protein.  See section XXX \015)'
(of the User Guide for details on how to process heteroatoms so their \015)'
(covalent and non-covalent bonds will be correctly interpreted. Note that for \015)'
(the accuracy of flexibility predictions, it is recommended to not include \015)'
(water molecules in the PDB input file, except for those water molecules that \015)'
(are entirely buried in the protein \(which may be assessed by PROACT or \015)'
(another tool\) or which form essential interactions between the protein and \015)'
(another molecule \(e.g., a protein-water-metal bond network\).\015)'
(\015)'
(iii\) The input file is expected to have appropriately protonated polar atoms \015)'
(\(e.g., Lys NZ has three protons at pH 7; a hydroxyl group has one, as does \015)'
(the backbone amide N\).  ProFlex does not add H\342\200\231s to the input file and will \015)'
(give erroneous results on a PDB file that does not contain polar hydrogen \015)'
(atoms. Please use a tool such as WhatIf, Reduce, InsightII, CHARMM, or AMBER \015)'
(to do this. \015)'
(\015)'
(For a more detailed description of the ProFlex options including the usage \015)'
(format and the purpose of each option, please refer to Section 3 of the  \015)'
(included ProFlex user guide: \015)'
(\015)'
(                $PROFLEX_HOME/../docs/ProFlex_User_Guide.pdf \015)'
(\015)'
(To run ProFlex: \015)'
(\015)'
(1\) Add ProFlex's bin directory to your shell's PATH variable, e.g., \015)'
(\015)'
ET
endstream
endobj
11 0 obj
2951
endobj
12 0 obj
<<
/Type /Page
/Parent 3 0 R
/Resources 5 0 R
/Contents 13 0 R
>>
endobj
13 0 obj
<<
/Length 14 0 R
>>
stream
BT
/F1 10 Tf
1 0 0 1 50 752 Tm
12 TL
(        setenv PATH ${PATH}:/usr/soft/proflex/bin \015)'
( \015)'
(2\) The basic command to run proflex on an input file is: \015)'
(\015)'
(        proflex -h <input file name.pdb> \015)'
(\015)'
(   Running proflex without any options will display the proflex "help" menu     )'
(\015)'
(with a list of valid options and the format of acceptable input arguments.  \015)'
(Users who wish to run proflex in an automated \(noninteractive\) fashion \015)'
(should use the "-non" option \(see the "help" menu\). \015)'
(\015)'
(                Part - III      How to interpret ProFlex output \015)'
(                ===========================================\015)'
(\015)'
(ProFlex outputs the results of its analysis into text files as well as \015)'
(scripts that facilitate graphical visualization of the protein based on the \015)'
(contents of those text files. Here is a list of the various output files and \015)'
(a brief description of their purpose:\015)'
(\015)'
(Text files:     \015)'
(-----------\015)'
( \015)'
(NOTE: In the file names below, \(1\) <protein> represents the prefix that \015)'
(precedes \342\200\234.pdb\342\200\235 in the input filename, e.g., 1bck.pdb -> <protein> = 1bck;\015)'
(and \(2\) \342\200\234xxxx\342\200\235 represents the run number to differentiate the output files \015)'
()'
(generated over multiple runs of ProFlex in the same directory. For example,\015)'
(the user may choose to analyze the flexibility of a protein without ligand \015)'
(followed by another run on the protein with ligand bound. The user can \015)'
(selectively add the bonds between the ligand atoms and the protein atoms by \015)'
(adding only those bonds to the \342\200\234proflexdataset\342\200\235 file and running ProFlex \015)'
(using the \342\200\234-p\342\200\235 option to read-in the input from the \342\200\234proflexdataset\342\200\235 fil)'
(e \015)'
(that contains the modified bond network information rather than the input \015)'
(PDB file. This allows the user to avoid reprocessing the entire bond network \015)'
(from scratch.\015)'
(\015)'
(1\) <protein>_proflexdataset             \015)'
(\015)'
(        - A ProFlex-generated text file that contains all the ATOM and HETATM \015)'
(records from the input PDB file followed by the information about all the\015)'
(covalent and non-covalent bonds \(e.g., H-bonds, hydrophobic interactions\).\015)'
(For each covalent bond, the pair of atoms that participate is listed. For\015)'
(each H-bond, the acceptor, the donor, and the hydrogen atom involved are \015)'
(identified. All the H-bonds and the hydrophobic tethers are assigned a \015)'
(unique index.\015)'
(\015)'
(2\) <protein>_allbond.xxxx\015)'
(\015)'
(        - The _allbonds file contains a list of all the covalent and non-\015)'
(covalent bonds. For every pair of bonded atoms, this file associates a bond \015)'
(weight \(see Jacobs et al. \(2001\) Proteins 44, 150-165\) that represents the \015)'
(relative flexibility of that bond on a scale of -1 \(maximum rigidity\) to +1 \015)'
(\(maximum flexibility\). Based on these weights, ProFlex partitions the bond \015)'
(set into independently rigid or flexible clusters and assigns a cluster \015)'
(label accordingly, i.e., positive if flexible, negative if rigid, and zero \015)'
(to dangling ends \(e.g., side chains not participating in hydrogen bonds or \015)'
(hydrophobic interactions\) whose motions are not coupled with other groups in \015)'
(the protein.\015)'
ET
endstream
endobj
14 0 obj
3516
endobj
15 0 obj
<<
/Type /Page
/Parent 3 0 R
/Resources 5 0 R
/Contents 16 0 R
>>
endobj
16 0 obj
<<
/Length 17 0 R
>>
stream
BT
/F1 10 Tf
1 0 0 1 50 752 Tm
12 TL
(\015)'
(3\) <protein>_analysis.log\015)'
(\015)'
(        - A list of various filtering options selected by the user as well as \015)'
(a brief summary of the ProFlex analysis.\015)'
(\015)'
(4\) <protein>_flex_xxxx.pdb\015)'
(\015)'
(        - A replica of the input PDB file with the b-value column replaced by \015)'
(each atom\342\200\231s flexibility index value and the atom number column is     replaced)'
( \015)'
(by an alternate index to help identify rigid and flexible       clusters easily )'
(\015)'
(in the visualization scripts.\015)'
(\015)'
(5\) <protein>_h-bonds_SEfilt.xxxx, <protein>_h-phobs_SEfilt.xxxx\015)'
(\015)'
(        - These two text files contain lists of indices of H-bonds and \015)'
(tethers, respectively, filtered based on stereochemical and energy filters.\015)'
(\015)'
(6\) preacptr_info\015)'
(\015)'
(        - A text file that lists the pre-acceptor atom numbers corresponding \015)'
(to the H-bonds listed in the \342\200\234h-bonds\342\200\235 file.\015)'
(\015)'
(7\) decomp_list\015)'
(\015)'
(        - This file contains rigid cluster decomposition information \015)'
(corresponding to each H-bond broken, which is then processed to generate a \015)'
(postscript file that graphically represents the cluster decomposition.\015)'
(\015)'
(Scripts: \015)'
(--------\015)'
(\015)'
(ProFlex output facilitates visualization of an input protein's flexibility \015)'
(through scripts designed to be run in the PyMol molecular graphics program.\015)'
(PyMol is a biomolecular visualization software tool available at:  \015)'
(\015)'
(                        http://pymol.sourceforge.net/ \015)'
(\015)'
(One version of PyMol is free for academics, and the fully-functional \015)'
(versions are available at modest cost.\015)'
(\015)'
(ProFlex outputs three PyMol scripts \(with extension \342\200\234.pml\342\200\235\) that display: \015)'
(\(i\) the rigid cluster decomposition of the protein, with each mutually rigid \015)'
(group of atoms with at least 7 atoms given a unique rigid cluster index \015)'
(\(e.g., RC1, RC2, etc.\), \(ii\) flexible clusters in which the atoms are \015)'
(coupled through the bond network and can move collectively \(also given \015)'
(unique cluster indices, in this case FC1, FC2, etc.\), and \(iii\) the \015)'
(flexibility index of each of the identified rigid or flexible clusters, as \015)'
(measured by the number of remaining degrees of freedom, in terms of single \015)'
(bond rotations, divided by the number of bonds in that region \(see Jacobs et \015)'
(al. \(2001\) Proteins 44, 150-165\). +1 represents maximal flexibility and -1 \015)'
(represents maximum rigidity. To map bond flexibility values onto atoms, \015)'
(main-chain atoms are assigned the index of the most rigid bond of its N-CA \015)'
(or CA-C bonds and for side chain atoms, the index is assigned based on the \015)'
(most rigid of all its incident bonds.  This information is complementary to \015)'
(that provided by the flexible or rigid cluster decomposition; in that case, \015)'
(coupling or independence of motion is shown, and in the case of flexibility \015)'
(index, relative flexibility or rigidity is shown \(where 0 represents \015)'
ET
endstream
endobj
17 0 obj
3246
endobj
18 0 obj
<<
/Type /Page
/Parent 3 0 R
/Resources 5 0 R
/Contents 19 0 R
>>
endobj
19 0 obj
<<
/Length 20 0 R
>>
stream
BT
/F1 10 Tf
1 0 0 1 50 752 Tm
12 TL
(isostatic, or just barely rigid\).\015)'
(\015)'
(The three PyMol scripts for automatically coloring and visualizing the \015)'
(protein flexibility based on flexibility index values, rigid cluster \015)'
(decomposition, and flexible cluster decomposition \(collective motions\) are \015)'
(output by ProFlex as: <protein>_flex_xxxx.pml, <protein>_RC_xxxx.pml, and \015)'
(<protein>_FC_xxxx.pml, respectively.\015)'
( \015)'
(Each of the pml scripts can be loaded into PyMol by clicking the "Run" \015)'
(command under the "File" drop-down menu and choosing the script name in the \015)'
(pop-up window that appears. The examples directory under proflex \015)'
(\("$PROFLEX_HOME/../examples/"\) has examples of each of the above scripts \015)'
(along with a detailed description of the contents of each script and a \015)'
(screen dump of how the corresponding results should appear in PyMol for two \015)'
(proteins. \015)'
(\015)'
(A fourth way of analyzing the data is presented in a hydrogen-bond dilution \015)'
(profile \(a ProFlex run-time option\) representing the gradual thermal \015)'
(denaturation of the hydrogen-bond and salt bridge network of the protein \015)'
(with increasing temperature \(see A. J. Rader, B. M. Hespenheide, L. A. Kuhn, \015)'
(and M. F. Thorpe \(2002\)\342\200\234Protein Unfolding: Rigidity Lost\342\200\235, PNAS 99, 3540-\015)'
(3545 and B. M. Hespenheide, A. J. Rader, M. F. Thorpe, and L. A. Kuhn \(2002\) \015)'
(\342\200\234Observing the Evolution of Flexible Regions During Unfolding\342\200\235, J. Molec. \015)'
(Graphics and Modelling 21, 195-207\). \015)'
(\015)'
(When hydrogen-bond dilution analysis is performed via the run-time option, \015)'
(the following file is created:  \015)'
(\015)'
(                <protein>_h-bonds.ps \015)'
(\015)'
(This is a postscript file that displays the rigid cluster decomposition \015)'
(after each H-bond whose dilution affects the overall cluster set. \(It can be \015)'
(conveniently changed to a pdf file by the ps2pdf command available on many \015)'
(Unix systems.\) Residue indices \(including insertions and missing residues\) \015)'
(are displayed along the top line to help identify each rigid cluster \015)'
(distinctly. For each H-bond broken, the index of that bond \(a unique \015)'
(identifier assigned in the proflexdataset file, the energy threshold for \015)'
(that bond, and the residues to which the donor and the acceptor atoms \015)'
(belong, are indicated on the right margin of the plot, as well as by carets \015)'
(above the corresponding residues in the graphical output.  For more \015)'
(information, see B. M. Hespenheide, A. J. Rader, M. F. Thorpe, and L. A. \015)'
(Kuhn \(2002\) \342\200\234Observing the Evolution of Flexible Regions During Unfolding\342\200\235, )'
(\015)'
(J. Molec. Graphics and Modelling 21, 195-207.\015)'
( \015)'
(For an exhaustive listing and description of all the output files, please \015)'
(refer to the User Guide \($PROFLEX_HOME/../docs/ProFlex_User_Guide.pdf\). \015)'
(Examples of ProFlex runs with input and output files along with snapshots of \015)'
(the visualization scripts when viewed in PyMol are present in the \015)'
(\342\200\234$PROFLEX_HOME/../examples/\342\200\235 directory for two proteins: 1bck and 1dif.\015)'
(\015)'
(\015)'
(Happy usage! \015)'
(\015)'
(Thank you, \015)'
(\015)'
(The ProFlex Team\015)'
(\015)'
(Protein Structural Analysis and Design Lab \015)'
(Department of Biochemistry & Molecular Biology \015)'
ET
endstream
endobj
20 0 obj
3536
endobj
21 0 obj
<<
/Type /Page
/Parent 3 0 R
/Resources 5 0 R
/Contents 22 0 R
>>
endobj
22 0 obj
<<
/Length 23 0 R
>>
stream
BT
/F1 10 Tf
1 0 0 1 50 752 Tm
12 TL
(Michigan State University\015)'
(E-mail: proflex@sol.bch.msu.edu \015)'
(\015)'
()'
ET
endstream
endobj
23 0 obj
125
endobj
3 0 obj
<<
/Type /Pages
/Count 6
/MediaBox [ 0 0 612 792 ]
/Kids [ 6 0 R 9 0 R 12 0 R 15 0 R 18 0 R 21 0 R ]
>>
endobj
xref
0 24
0000000000 65535 f 0000000009 00000 n 0000000146 00000 n 0000017112 00000 n 0000000195 00000 n 0000000273 00000 n 0000000344 00000 n 0000000424 00000 n 0000002935 00000 n 0000002955 00000 n 0000003036 00000 n 0000006041 00000 n 0000006062 00000 n 0000006144 00000 n 0000009714 00000 n 0000009735 00000 n 0000009817 00000 n 0000013117 00000 n 0000013138 00000 n 0000013220 00000 n 0000016810 00000 n 0000016831 00000 n 0000016913 00000 n 0000017092 00000 n trailer
<<
/Size 24
/Root 2 0 R
/Info 1 0 R
>>
startxref
17231
%%EOF
